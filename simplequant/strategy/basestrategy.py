from abc import ABCMeta, abstractmethod

from simplequant.environment import Env


class BaseStrategy(Env):
    """
    Strategy is an abstract base class providing an interface for
    all subsequent (inherited) strategy handling objects.
    The goal of a (derived) Strategy object is to generate Signal
    objects for particular symbols based on the inputs of Bars
    (OLHCVI) generated by a DataHandler object.
    This is designed to work both with historic and live data as
    the Strategy object is agnostic to the data source,
    since it obtains the bar tuples from a queue object.
    """

    __metaclass__ = ABCMeta

    api = Env._database

    @abstractmethod
    def handleBar(self, events_queue, event):
        """
        Provides the mechanisms to calculate the list of signals.
        """
        raise NotImplementedError("Should implement calculate_signals()")


# class BuyAndHoldStrategy(Strategy):
#     """
#     This is an extremely simple strategy that goes LONG all of the
#     symbols as soon as a bar is received. It will never exit a position.
#     It is primarily used as a testing mechanism for the Strategy class
#     as well as a benchmark upon which to compare other strategies.
#     """
#
#     def __init__(self, bars, events):
#         """
#         Initialises the buy and hold strategy.
#         Parameters:
#         bars - The DataHandler object that provides bar information
#         events - The Event Queue object.
#         """
#         self.bars = bars
#         self.symbol_list = self.bars.symbol_list
#         self.events = events
#
#         # Once buy & hold signal is given, these are set to True
#         self.bought = self._calculate_initial_bought()
#
#     def _calculate_initial_bought(self):
#         """
#         Adds keys to the bought dictionary for all symbols
#         and sets them to False.
#         """
#         bought = {}
#         for s in self.symbol_list:
#             bought[s] = False
#         return bought
#
#     def handleBar(self, event):
#         """
#         For "Buy and Hold" we generate a single signal per symbol
#         and then no additional signals. This means we are
#         constantly long the market from the date of strategy
#         initialisation.
#         Parameters
#         event - A MarketEvent object.
#         """
#         if event.type == 'MARKET':
#             for s in self.symbol_list:
#                 bars = self.bars.getLatestBars(s, n=1)
#                 if bars is not None and bars != []:
#                     if self.bought[s] == False:
#                         # (Symbol, Datetime, Type = LONG, SHORT or EXIT)
#                         signal = SignalEvent(bars[0].symbol, bars[0].datetime, 'LONG')
#                         self.events.put(signal)
#                         self.bought[s] = True

